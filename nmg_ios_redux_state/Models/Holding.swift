////
////  Holding.swift
////  nmg_ios
////
////  Created by Dewey Gaedcke on 6/4/17.
////  Copyright Â© 2017 New Millennial Games, LLC. All rights reserved.
////
//
//import Foundation
//
////
//class Holding {		// DbModelProto
//	/*  the actual row in the DB
//
//		as price approaches max-for-sport, shares will split
//
//	*/
//
//	var id:Int64 = 0	// holding ID; generated by DB
//	var userId:String = ""
//	var teamEventKey:AssetKey = AssetKey.seed
//	var shares:Share = 0
//	var purchasePrice:NmgCurrency = 0
//	var assetStatus:PortfolioAssetStatus = .ignore
//	
//	var gamePlayStatus:GamePlayStatus = .preGame
//	
//	private var _teamPriceRec:TeamPrice {
//		return AppState.shared.priceInfoForTeam(teamId: teamID)
//	}
//	
//	private var _currentPrice:NmgCurrency {
//		return NmgCurrency(value: _teamPriceRec.price)
//	}
//	
//	var currentPrice:NmgCurrency {
//		return _currentPrice
//	}
//	
//	var name:String {
//		return team.displayName	// protocol compliance
//	}
//	var displayName:String {
//		return team.displayName	// protocol compliance
//	}
//	
//	var currentValue:NmgCurrency {
//		return NmgCurrency(float: _currentPrice.asFloat * Float(shares.value))
//	}
//	
//	func byId(id:Int64) -> Holding? {
//		return AppState.shared.userPortfolio.holdings.byId(id: id)
//	}
//	
//	func isForTeam(assetKey:AssetKey) -> Bool {
//		return self.assetKey == assetKey
//	}
//	
////	func isTeamGameMatch(teamId:String, gameId:String) -> Bool {
//////		return self.teamEventKey.teamId == teamId && self.teamEventKey.gameId == gameId
////		// FINDME_ASSETKEY
////		return false
////	}
//	
//	required init() {
//		// NIU
//	}
//
//	var description: String {
//		return displayName
//	}
//}
//
//extension Holding: EntityRecProto {
//	// section head resolver
//}
//
//extension Holding {
//	// viewModel methods to support UI
//	
//	var assetKey:AssetKey {
//		return self.teamEventKey
//	}
//	
//	var teamID:String {
//		return teamEventKey.teamId
//	}
//	
//	var team:Team {
//		return AppState.shared.teamFromID(id: teamID)
//	}
//	
//	var event:Event {
//		return AppState.shared.allEvents.byId(id: teamEventKey.eventId)
//	}
//	
//	static func initFromApiMsg(p: PortfolioHoldingResultMsgResponseBody) -> Holding {
//		let h = Holding()
//		h.id = p.transID
//		h.teamEventKey = AssetKey(keyString: p.assetKey)
//		h.shares = Share(value: Int(p.shares))
//		h.purchasePrice = NmgCurrency(float: Float(p.price))
//		h.assetStatus = PortfolioAssetStatus(rawValue: p.assetStatus)  ?? .owned
//		h.gamePlayStatus = GamePlayStatus(rawValue: p.gamePlayStatus) ?? .endedWin
//		return h
//	}
//	
//	static func makeMock(team:Team) -> Holding {
//		let randPrice:Float = Float((1...19).random) + Float((0...99).random) / 100.0
//		let randShares = (22...423).random
//		let randTransID = Int64((600...948).random)
//		let randStatus = (0...5).random
//		
////		print("randPrice: \(randPrice)")
//		let h = Holding()
//		h.id = randTransID
//		h.teamEventKey = AssetKey(team:team)
//		h.shares = Share(value: randShares)
//		h.purchasePrice = NmgCurrency(float:randPrice)
//		
//		h.assetStatus = .owned
//		switch randStatus {
//		case 0:
//			h.gamePlayStatus = .preGame
//		case 1:
//			h.gamePlayStatus = .postponed
//		case 2:
//			h.gamePlayStatus = .gameOn
//		case 3:
//			h.gamePlayStatus = .endedWin
//		default:	// want this more frequently
//			h.gamePlayStatus = .tradable
//		}
//		
//		return h
//	}
//}
//
//
//extension Array where Element == Holding {
//	// server loads list of holdings for a given user
//	// list is aggregaed into a PortfolioState record
//	// for use on the UI
//	func byId(id:Int64) -> Holding {
//		return self.filter({$0.id == id}).first!
//	}
//	
////	var expressedAsPortfolioState:PortfolioState {
////		let ps = AppState.shared.userPortfolio
////		ps.clear()
////		for h in self {
////			ps.addHolding(holding: h)
////		}
////		return ps
////	}
//
//	//	keep api thru the PortfolioState object
//	// dont allow hitting assets directly
//	var totalValue:NmgCurrency {
//		return self.reduce(0, { $0 + NmgCurrency(value: $1.shares.asDouble * $1.purchasePrice.asDouble) } )
//	}
//	
//	func assetValue(from team:Team? = nil) -> NmgCurrency {
//		if let e = team {
//			return self.filter({$0.teamEventKey.teamId == e.id}).totalValue
//		} else {
//			return self.totalValue
//		}
//	}
//	
//	func assetShareCount(for team:Team? = nil) -> Share {
//		if let t = team {
//			return self.filter({$0.teamEventKey.teamId == t.id}).reduce(0, { $0 + $1.shares } )
//		} else {
//			return totalShares
//		}
//	}
//	
//	var totalShares:Share {
//		return self.reduce(0, { $0 + $1.shares } )
//	}
//	
//	func assetShares(from event:Event? = nil) -> Share {
//		if let e = event {
//			return self.filter({$0.teamEventKey.eventId == e.id}).totalShares
//		} else {
//			return self.totalShares
//		}
//	}
//}
