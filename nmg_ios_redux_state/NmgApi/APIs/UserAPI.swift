//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import PromiseKit



open class UserAPI {
    /**
     add user
     
     - parameter addRequestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userAdd(addRequestBody: AddRequestBody, completion: @escaping ((_ data: AddResponseBody?,_ error: Error?) -> Void)) {
        userAddWithRequestBuilder(addRequestBody: addRequestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     add user
     
     - parameter addRequestBody: (body)  
     - returns: Promise<AddResponseBody>
     */
    open class func userAdd( addRequestBody: AddRequestBody) -> Promise<AddResponseBody> {
        let (promise, resolver) = Promise<AddResponseBody>.pending()
        userAdd(addRequestBody: addRequestBody) { data, error in
            if let error = error {
                resolver.reject(error)
            } else {
                resolver.fulfill(data!)
            }
        }
        return promise
    }

    /**
     add user
     - POST /user/add
     - read user app settings
     - examples: [{contentType=application/json, example={
  "DOB" : "Eos possimus omnis libero placeat aut eligendi.",
  "avatarURL" : "Aut dolor ad velit modi fuga.",
  "email" : "Nemo placeat qui id vel.",
  "handle" : "Suscipit ut optio aut rem blanditiis.",
  "phone" : "In quis magnam."
}}]
     
     - parameter addRequestBody: (body)  

     - returns: RequestBuilder<AddResponseBody> 
     */
    open class func userAddWithRequestBuilder(addRequestBody: AddRequestBody) -> RequestBuilder<AddResponseBody> {
        let path = "/user/add"
        let URLString = NmgApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addRequestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddResponseBody>.Type = NmgApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     delete user
     
     - parameter userID: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userDelete(userID: String, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        userDeleteWithRequestBuilder(userID: userID).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     delete user
     
     - parameter userID: (path) User ID 
     - returns: Promise<Bool>
     */
    open class func userDelete( userID: String) -> Promise<Bool> {
        let (promise, resolver) = Promise<Bool>.pending()
        userDelete(userID: userID) { data, error in
            if let error = error {
                resolver.reject(error)
            } else {
                resolver.fulfill(data!)
            }
        }
        return promise
    }

    /**
     delete user
     - DELETE /user/{UserID}
     - Delete a user by ID.
     - examples: [{contentType=application/json, example=true}]
     
     - parameter userID: (path) User ID 

     - returns: RequestBuilder<Bool> 
     */
    open class func userDeleteWithRequestBuilder(userID: String) -> RequestBuilder<Bool> {
        var path = "/user/{UserID}"
        let userIDPreEscape = "\(userID)"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserID}", with: userIDPostEscape, options: .literal, range: nil)
        let URLString = NmgApiAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = NmgApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     update user
     
     - parameter userID: (path) User ID 
     - parameter updateRequestBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userUpdate(userID: String, updateRequestBody: UpdateRequestBody, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        userUpdateWithRequestBuilder(userID: userID, updateRequestBody: updateRequestBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     update user
     
     - parameter userID: (path) User ID 
     - parameter updateRequestBody: (body)  
     - returns: Promise<Bool>
     */
    open class func userUpdate( userID: String,  updateRequestBody: UpdateRequestBody) -> Promise<Bool> {
        let (promise, resolver) = Promise<Bool>.pending()
        userUpdate(userID: userID, updateRequestBody: updateRequestBody) { data, error in
            if let error = error {
                resolver.reject(error)
            } else {
                resolver.fulfill(data!)
            }
        }
        return promise
    }

    /**
     update user
     - PUT /user/{UserID}
     - update user bio info
     - examples: [{contentType=application/json, example=true}]
     
     - parameter userID: (path) User ID 
     - parameter updateRequestBody: (body)  

     - returns: RequestBuilder<Bool> 
     */
    open class func userUpdateWithRequestBuilder(userID: String, updateRequestBody: UpdateRequestBody) -> RequestBuilder<Bool> {
        var path = "/user/{UserID}"
        let userIDPreEscape = "\(userID)"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{UserID}", with: userIDPostEscape, options: .literal, range: nil)
        let URLString = NmgApiAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateRequestBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bool>.Type = NmgApiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
